# -*- coding: utf-8 -*-
"""Meta Llama 3.2 - 1B (Recipe Generator).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10fPiGcu0appw6z_-7SEP_yd3baDE_hld

# Meta - LLAMA 3.2 (1B)
"""

!pip install transformers peft accelerate bitsandbytes datasets

from huggingface_hub import login

login(".................")  # Paste your token here

from transformers import AutoModelForCausalLM, AutoTokenizer
from transformers import AutoTokenizer, AutoModelForCausalLM, BitsAndBytesConfig

bnb_config = BitsAndBytesConfig(
    load_in_4bit=True,
    bnb_4bit_use_double_quant=False,
    bnb_4bit_compute_dtype="float16"
)

model_id = "meta-llama/Llama-3.2-1B-Instruct"

tokenizer = AutoTokenizer.from_pretrained(model_id, use_fast=True)
model = AutoModelForCausalLM.from_pretrained(model_id, quantization_config=bnb_config, device_map="auto")

"""# Inferencing the Model Before Fine Tuning"""

prompt = """You are an expert chef. Your task is to generate unique and novel recipes that meet specific criteria. Use only the ingredients provided, and ensure the recipe is creative, clear, and easy to follow. Course: " roti", Cuisine: " Indian", Recipe Time: "40minutes" , Serves: "10 roti", Available Ingredients: [" 2 cup wheat flour, ¼ tsp ajwain, ½ tsp salt, 2 tbsp oil, water, for kneading, ghee, for layers, oil, for roasting"], Instructions: Provide a step-by-step recipe in short, clear sentences based on above provided details."""


inputs = tokenizer(prompt, return_tensors="pt").to("cuda")
outputs = model.generate(**inputs, max_new_tokens=512, do_sample=True, temperature=0.7)
print(tokenizer.decode(outputs[0], skip_special_tokens=True))

prompt = """You are an expert chef. Your task is to generate unique and novel recipes that meet specific criteria. Use only the ingredients provided, and ensure the recipe is creative, clear, and easy to follow. Course: " cake", Cuisine: " Indian", Recipe Time: "1hourhr10minutes" , Serves: "1 cake", Available Ingredients: ["for mawa / khova (100 gram): 1 tsp butter, ¼ cup milk, ½ cup milk powder", "for cake batter: ½ cup (120 gm) butter, 1 cup (150 gm) powdered sugar, 1½ cup (240 gm) maida / plain flour, 1 tsp baking powder, ¼ tsp baking soda, ¼ cup (60 ml) curd / yogurt, fresh, ¾ cup (190 ml) milk, ¼ tsp cardamom powder, 3 tbsp cashew & almonds, chopped"], Instructions: Provide a step-by-step recipe in short, clear sentences based on above provided details."""
inputs = tokenizer(prompt, return_tensors="pt").to("cuda")
outputs = model.generate(**inputs, max_new_tokens=512, do_sample=True, temperature=0.7)
print(tokenizer.decode(outputs[0], skip_special_tokens=True))

prompt = """You are an expert chef. Your task is to generate unique and novel recipes that meet specific criteria. Use only the ingredients provided, and ensure the recipe is creative, clear, and easy to follow. Course: " chutney, curry", Cuisine: " south indian", Recipe Time: "20minutes" , Serves: "5 Servings", Available Ingredients: [" 3 tbsp besan, ½ cup water, 2 tbsp oil, 1 tsp mustard, ½ tsp chana dal, ½ tsp urad dal, ½ tsp cumin, 2 dried red chilli, few curry leaves, pinch hing, 2 onion, sliced, 1 inch ginger, chopped, 4 chilli, slit, 1 tsp salt, ¼ tsp turmeric, 1 tomato, cubed, 2 tbsp coriander, chopped, 2 tbsp lemon juice"], Instructions: Provide a step-by-step recipe in short, clear sentences based on above provided details."""
inputs = tokenizer(prompt, return_tensors="pt").to("cuda")
outputs = model.generate(**inputs, max_new_tokens=512, do_sample=True, temperature=0.7)
print(tokenizer.decode(outputs[0], skip_special_tokens=True))

prompt = """You are an expert chef. Your task is to generate unique and novel recipes that meet specific criteria. Use only the ingredients provided, and ensure the recipe is creative, clear, and easy to follow. Course: " Dessert", Cuisine: " mangalore, Recipe Time: "3minutes" , Serves: "1 Serving", Available Ingredients: [" 1 scoop vanilla ice cream, 1 tbsp grapes, chopped, 1 tbsp mango, chopped, 1 tbsp apple, chopped, 1 scoop strawberry ice cream, 1 tbsp strawberry jelly, 2 tbsp nuts, cashew, almonds, pistachios, 1 tbsp tutti frutti, 1 scoop mango ice cream, 1 cherry"], Instructions: Provide a step-by-step recipe in short, clear sentences based on above provided details."""


inputs = tokenizer(prompt, return_tensors="pt").to("cuda")
outputs = model.generate(**inputs, max_new_tokens=512, do_sample=True, temperature=0.7)
print(tokenizer.decode(outputs[0], skip_special_tokens=True))

prompt = """You are an expert chef. Your task is to generate unique and novel recipes that meet specific criteria. Use only the ingredients provided, and ensure the recipe is creative, clear, and easy to follow. Course: " Breakfast", Cuisine: " south india", Recipe Time: "20minutes" , Serves: "20 dosa", Available Ingredients: [" 1.5 cup besan / gram flour, ¼ cup rava / semolina / suji, coarse, ¼ cup rice flour, fine, ½ tsp ajwain, ¼ tsp turmeric, ½ tsp chilli powder, ¾ tsp salt, water, oil, for roasting"], Instructions: Provide a step-by-step recipe in short, clear sentences based on above provided details."""

inputs = tokenizer(prompt, return_tensors="pt").to("cuda")
outputs = model.generate(**inputs, max_new_tokens=512, do_sample=True, temperature=0.7)
print(tokenizer.decode(outputs[0], skip_special_tokens=True))

prompt = """You are an expert chef. Your task is to generate unique and novel recipes that meet specific criteria. Use only the ingredients provided, and ensure the recipe is creative, clear, and easy to follow. Course: " snacks", Cuisine: " indian street food", Recipe Time: "40minutes" , Serves: "5 Servings", Available Ingredients: ["for pressure cooking: 2 tbsp butter, 2 tbsp oil, 1 tsp cumin, 1 onion, finely chopped, 1 tsp ginger garlic paste, ¼ tsp turmeric, 1 tsp chilli powder, 2 tbsp pav bhaji masala, 2 tbsp coriander, finely chopped, 2 tomato, finely chopped, 1 carrot, chopped, 10 florets cauliflower, 3 tbsp peas, ½ capsicum, finely chopped, ½ beetroot, chopped, 2 potato, chopped, 1½ cup water, 1 tsp salt", "for tadka: 2 tsp oil, 1 tbsp butter, 1 tsp kasuri methi, 2 tbsp coriander, finely chopped, ¼ tsp pav bhaji masala", "for roasting pav: ½ tsp butter, ¼ tsp pav bhaji masala, 1 tbsp coriander, pav"], Instructions: Provide a step-by-step recipe in short, clear sentences based on above provided details."""

inputs = tokenizer(prompt, return_tensors="pt").to("cuda")
outputs = model.generate(**inputs, max_new_tokens=512, do_sample=True, temperature=0.7)
print(tokenizer.decode(outputs[0], skip_special_tokens=True))

prompt = """You are an expert chef. Your task is to generate unique and novel recipes that meet specific criteria. Use only the ingredients provided, and ensure the recipe is creative, clear, and easy to follow. Course: " Snack", Cuisine: " indian street food", Recipe Time: "30minutes" , Serves: "7 Servings", Available Ingredients: [" 2 slice bread, white or brown, 1 potato, boiled & mashed, ½ cup paneer, grated, ½ tsp chilli powder, ½ tsp turmeric, ½ tsp cumin powder, ½ tsp garam masala, 1 tsp aamchur, ½ tsp salt, 2 tbsp corn flour, ½ onion, finely chopped, 2 tbsp coriander, chopped, 2 chilli, finely chopped, breadcrumbs, for coating, oil, for frying"], Instructions: Provide a step-by-step recipe in short, clear sentences based on above provided details."""
inputs = tokenizer(prompt, return_tensors="pt").to("cuda")
outputs = model.generate(**inputs, max_new_tokens=512, do_sample=True, temperature=0.7)
print(tokenizer.decode(outputs[0], skip_special_tokens=True))

prompt = """ou are an expert chef. Your task is to generate unique and novel recipes that meet specific criteria. Use only the ingredients provided, and ensure the recipe is creative, clear, and easy to follow. Course: " pulao", Cuisine: " north indian", Recipe Time: "30minutes" , Serves: "2 Servings", Available Ingredients: [" 2 tbsp oil, 2 bay leaf, 3 pods cardamom, 4 cloves, 1 inch cinnamon, ½ tsp pepper, 1 tsp cumin / jeera, 1 onion, sliced, 1 tsp ginger garlic paste, 1 chilli, slit, 2 tbsp mint / pudina, finely chopped, 2 tbsp coriander, finely chopped, 1 tomato, finely chopped, ½ tsp turmeric, 1 tsp kashmiri red chilli powder, ½ tsp cumin powder, ½ tsp coriander powder, ½ tsp garam masala, 2 potato / aloo, cubed, ½ cup peas / matar, 2 cup water, 1 tsp salt, 1 cup basmati rice"], Instructions: Provide a step-by-step recipe in short, clear sentences based on above provided details."""

inputs = tokenizer(prompt, return_tensors="pt").to("cuda")
outputs = model.generate(**inputs, max_new_tokens=512, do_sample=True, temperature=0.7)
print(tokenizer.decode(outputs[0], skip_special_tokens=True))

prompt = """You are an expert chef. Your task is to generate unique and novel recipes that meet specific criteria. Use only the ingredients provided, and ensure the recipe is creative, clear, and easy to follow. Course: " sandwich", Cuisine: " indian street food", Recipe Time: "20minutes" , Serves: "4 Servings", Available Ingredients: ["for chilli garlic butter: 2 tbsp butter, 3 chilli, finely chopped, 5 garlic, finely chopped, ½ tsp mixed herbs, 2 tbsp coriander, finely chopped", "for sandwich & toast: bread, chilli flakes, cheese, tomato, onion, cucumber"], Instructions: Provide a step-by-step recipe in short, clear sentences based on above provided details."""
inputs = tokenizer(prompt, return_tensors="pt").to("cuda")
outputs = model.generate(**inputs, max_new_tokens=512, do_sample=True, temperature=0.7)
print(tokenizer.decode(outputs[0], skip_special_tokens=True))

prompt = """You are an expert chef. Your task is to generate unique and novel recipes that meet specific criteria. Use only the ingredients provided, and ensure the recipe is creative, clear, and easy to follow. Course: " Side Dish", Cuisine: " north indian", Recipe Time: "20minutes" , Serves: "4 Servings", Available Ingredients: [" 3 tsp oil, 1 tsp jeea / cumin, 1 tsp kasuri methi / dry fenugreek leaves, 1 onion, finely chopped, ½ tsp ginger garlic paste, 1 tomato, finely chopped, 1 potato / aloo, finely chopped, ¼ tsp turmeric / haldi, ½ tsp kashmiri red chilli powder / lal mirch powder, 1 tsp coriander powder, ¾ tsp salt, 4 cup cabbage, shredded, ½ cup peas / matar, ¼ tsp garam masala, 2 tbsp coriander leaves, finely chopped"], Instructions: Provide a step-by-step recipe in short, clear sentences based on above provided details."""
inputs = tokenizer(prompt, return_tensors="pt").to("cuda")
outputs = model.generate(**inputs, max_new_tokens=512, do_sample=True, temperature=0.7)
print(tokenizer.decode(outputs[0], skip_special_tokens=True))

"""# Model Training"""

from datasets import load_dataset

# Load your dataset from Hugging Face (replace 'Karthik15/UltimateRecipeData' with the exact name of your dataset)
dataset = load_dataset('Karthik15/UltimateRecipeData')

# Display the dataset's structure
print(dataset)

tokenizer.pad_token = tokenizer.eos_token

# Tokenization function
def tokenize_function(example):
    # Format prompt + response in a single sequence
    full_text = f"### Instruction:\n{example['text']}\n\n### Response:\n{example['label']}"
    tokenized = tokenizer(full_text, padding="max_length", truncation=True, max_length=512)

    # Set labels and mask padding tokens in labels
    tokenized["labels"] = [
        (token if token != tokenizer.pad_token_id else -100)
        for token in tokenized["input_ids"]
    ]

    return tokenized

# Preprocess the dataset
def preprocess_data(dataset):
    tokenized_datasets = dataset.map(tokenize_function, batched=False)

    # Remove original text fields
    tokenized_datasets = tokenized_datasets.remove_columns(["text", "label"])

    # Format for PyTorch
    tokenized_datasets.set_format(type='torch', columns=['input_ids', 'attention_mask', 'labels'])

    return tokenized_datasets

# Apply preprocessing
tokenized_datasets = preprocess_data(dataset)

# Check a sample
print(tokenized_datasets["train"][0])

train_dataset_split = tokenized_datasets['train'].train_test_split(test_size=0.1)  # 10% for eval set

train_dataset = train_dataset_split['train']  # Training data
eval_dataset = train_dataset_split['test']   # Evaluation (validation) data

print(train_dataset)
print(eval_dataset)

from peft import get_peft_model, LoraConfig, TaskType

peft_config = LoraConfig(
    task_type=TaskType.CAUSAL_LM,
    r=16,
    lora_alpha=32,
    lora_dropout=0.05,
    bias="none",
    target_modules=["q_proj", "v_proj"]
)

model = get_peft_model(model, peft_config)

model.print_trainable_parameters()

from transformers import Trainer, TrainingArguments

# Define training arguments
training_args = TrainingArguments(
    output_dir='./results',  # where to save results
    per_device_train_batch_size=8,
    per_device_eval_batch_size=8,
    num_train_epochs=10,
    logging_dir='./logs',
    logging_steps=10,
    save_steps=10,
    eval_steps=10,
    report_to=[]  # Disable reporting to avoid WandB
)

# Define the Trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,  # Replace with your training dataset
    eval_dataset=eval_dataset,    # Replace with your evaluation dataset
    tokenizer=tokenizer,
)

# Train and evaluate after unfreezing LoRA layers
trainer.train()
trainer.evaluate()

import matplotlib.pyplot as plt
from transformers import Trainer

# Assuming `trainer` is your Hugging Face Trainer object
log_history = trainer.state.log_history

# Extract losses
train_loss = [log["loss"] for log in log_history if "loss" in log]
eval_loss = [log["eval_loss"] for log in log_history if "eval_loss" in log]
steps_train = [log["step"] for log in log_history if "loss" in log]
steps_eval = [log["step"] for log in log_history if "eval_loss" in log]

# Plotting
plt.figure(figsize=(10, 5))
plt.plot(steps_train, train_loss, label="Training Loss", marker='o')
plt.plot(steps_eval, eval_loss, label="Evaluation Loss", marker='s')
plt.xlabel("Steps")
plt.ylabel("Loss")
plt.title("Training vs Evaluation Loss")
plt.legend()
plt.grid(True)
plt.show()

"""# Inferencing the Model after Fine Tuning"""

prompt = """You are an expert chef. Your task is to generate unique and novel recipes that meet specific criteria. Use only the ingredients provided, and ensure the recipe is creative, clear, and easy to follow. Course: " roti", Cuisine: " Indian", Recipe Time: "40minutes" , Serves: "10 roti", Available Ingredients: [" 2 cup wheat flour, ¼ tsp ajwain, ½ tsp salt, 2 tbsp oil, water, for kneading, ghee, for layers, oil, for roasting"], Instructions: Provide a step-by-step recipe in short, clear sentences based on above provided details."""


inputs = tokenizer(prompt, return_tensors="pt").to("cuda")
outputs = model.generate(**inputs, max_new_tokens=512, do_sample=True, temperature=0.7)
print(tokenizer.decode(outputs[0], skip_special_tokens=True))

prompt = """You are an expert chef. Your task is to generate unique and novel recipes that meet specific criteria. Use only the ingredients provided, and ensure the recipe is creative, clear, and easy to follow. Course: " cake", Cuisine: " Indian", Recipe Time: "1hourhr10minutes" , Serves: "1 cake", Available Ingredients: ["for mawa / khova (100 gram): 1 tsp butter, ¼ cup milk, ½ cup milk powder", "for cake batter: ½ cup (120 gm) butter, 1 cup (150 gm) powdered sugar, 1½ cup (240 gm) maida / plain flour, 1 tsp baking powder, ¼ tsp baking soda, ¼ cup (60 ml) curd / yogurt, fresh, ¾ cup (190 ml) milk, ¼ tsp cardamom powder, 3 tbsp cashew & almonds, chopped"], Instructions: Provide a step-by-step recipe in short, clear sentences based on above provided details."""
inputs = tokenizer(prompt, return_tensors="pt").to("cuda")
outputs = model.generate(**inputs, max_new_tokens=512, do_sample=True, temperature=0.7)
print(tokenizer.decode(outputs[0], skip_special_tokens=True))

prompt = """You are an expert chef. Your task is to generate unique and novel recipes that meet specific criteria. Use only the ingredients provided, and ensure the recipe is creative, clear, and easy to follow. Course: " chutney, curry", Cuisine: " south indian", Recipe Time: "20minutes" , Serves: "5 Servings", Available Ingredients: [" 3 tbsp besan, ½ cup water, 2 tbsp oil, 1 tsp mustard, ½ tsp chana dal, ½ tsp urad dal, ½ tsp cumin, 2 dried red chilli, few curry leaves, pinch hing, 2 onion, sliced, 1 inch ginger, chopped, 4 chilli, slit, 1 tsp salt, ¼ tsp turmeric, 1 tomato, cubed, 2 tbsp coriander, chopped, 2 tbsp lemon juice"], Instructions: Provide a step-by-step recipe in short, clear sentences based on above provided details."""
inputs = tokenizer(prompt, return_tensors="pt").to("cuda")
outputs = model.generate(**inputs, max_new_tokens=512, do_sample=True, temperature=0.7)
print(tokenizer.decode(outputs[0], skip_special_tokens=True))

prompt = """You are an expert chef. Your task is to generate unique and novel recipes that meet specific criteria. Use only the ingredients provided, and ensure the recipe is creative, clear, and easy to follow. Course: " Dessert", Cuisine: " mangalore, Recipe Time: "3minutes" , Serves: "1 Serving", Available Ingredients: [" 1 scoop vanilla ice cream, 1 tbsp grapes, chopped, 1 tbsp mango, chopped, 1 tbsp apple, chopped, 1 scoop strawberry ice cream, 1 tbsp strawberry jelly, 2 tbsp nuts, cashew, almonds, pistachios, 1 tbsp tutti frutti, 1 scoop mango ice cream, 1 cherry"], Instructions: Provide a step-by-step recipe in short, clear sentences based on above provided details."""


inputs = tokenizer(prompt, return_tensors="pt").to("cuda")
outputs = model.generate(**inputs, max_new_tokens=512, do_sample=True, temperature=0.7)
print(tokenizer.decode(outputs[0], skip_special_tokens=True))

prompt = """You are an expert chef. Your task is to generate unique and novel recipes that meet specific criteria. Use only the ingredients provided, and ensure the recipe is creative, clear, and easy to follow. Course: " Breakfast", Cuisine: " south india", Recipe Time: "20minutes" , Serves: "20 dosa", Available Ingredients: [" 1.5 cup besan / gram flour, ¼ cup rava / semolina / suji, coarse, ¼ cup rice flour, fine, ½ tsp ajwain, ¼ tsp turmeric, ½ tsp chilli powder, ¾ tsp salt, water, oil, for roasting"], Instructions: Provide a step-by-step recipe in short, clear sentences based on above provided details."""

inputs = tokenizer(prompt, return_tensors="pt").to("cuda")
outputs = model.generate(**inputs, max_new_tokens=512, do_sample=True, temperature=0.7)
print(tokenizer.decode(outputs[0], skip_special_tokens=True))

prompt = """You are an expert chef. Your task is to generate unique and novel recipes that meet specific criteria. Use only the ingredients provided, and ensure the recipe is creative, clear, and easy to follow. Course: " snacks", Cuisine: " indian street food", Recipe Time: "40minutes" , Serves: "5 Servings", Available Ingredients: ["for pressure cooking: 2 tbsp butter, 2 tbsp oil, 1 tsp cumin, 1 onion, finely chopped, 1 tsp ginger garlic paste, ¼ tsp turmeric, 1 tsp chilli powder, 2 tbsp pav bhaji masala, 2 tbsp coriander, finely chopped, 2 tomato, finely chopped, 1 carrot, chopped, 10 florets cauliflower, 3 tbsp peas, ½ capsicum, finely chopped, ½ beetroot, chopped, 2 potato, chopped, 1½ cup water, 1 tsp salt", "for tadka: 2 tsp oil, 1 tbsp butter, 1 tsp kasuri methi, 2 tbsp coriander, finely chopped, ¼ tsp pav bhaji masala", "for roasting pav: ½ tsp butter, ¼ tsp pav bhaji masala, 1 tbsp coriander, pav"], Instructions: Provide a step-by-step recipe in short, clear sentences based on above provided details."""

inputs = tokenizer(prompt, return_tensors="pt").to("cuda")
outputs = model.generate(**inputs, max_new_tokens=512, do_sample=True, temperature=0.7)
print(tokenizer.decode(outputs[0], skip_special_tokens=True))

prompt = """You are an expert chef. Your task is to generate unique and novel recipes that meet specific criteria. Use only the ingredients provided, and ensure the recipe is creative, clear, and easy to follow. Course: " Snack", Cuisine: " indian street food", Recipe Time: "30minutes" , Serves: "7 Servings", Available Ingredients: [" 2 slice bread, white or brown, 1 potato, boiled & mashed, ½ cup paneer, grated, ½ tsp chilli powder, ½ tsp turmeric, ½ tsp cumin powder, ½ tsp garam masala, 1 tsp aamchur, ½ tsp salt, 2 tbsp corn flour, ½ onion, finely chopped, 2 tbsp coriander, chopped, 2 chilli, finely chopped, breadcrumbs, for coating, oil, for frying"], Instructions: Provide a step-by-step recipe in short, clear sentences based on above provided details."""
inputs = tokenizer(prompt, return_tensors="pt").to("cuda")
outputs = model.generate(**inputs, max_new_tokens=512, do_sample=True, temperature=0.7)
print(tokenizer.decode(outputs[0], skip_special_tokens=True))

from peft import PeftModel

# Save the LoRA adapter
model.save_pretrained("lora_llama_model")
tokenizer.save_pretrained("lora_llama_model")















